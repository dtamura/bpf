package main

import (
	"bytes"
	"encoding/binary"
	"errors"
	"log"
	"net/netip"
	"os"
	"os/signal"
	"syscall"

	"github.com/cilium/ebpf"
	"github.com/cilium/ebpf/internal/unix"
	"github.com/cilium/ebpf/link"
	"github.com/cilium/ebpf/ringbuf"
)

//go:generate go run github.com/cilium/ebpf/cmd/bpf2go -cc clang -cflags "-O2 -Wall -g -Werror -D __TARGET_ARCH_x86" -type event tcpconnect tcpconnect.c

func main() {

	// Load pre-compiled programs into the kernel.
	bpfObjs := tcpconnectObjects{}
	if err := loadTcpconnectObjects(&bpfObjs, &ebpf.CollectionOptions{}); err != nil {
		log.Fatalf("load object: %s", err)
	}
	defer bpfObjs.Close()

	// Attach the program.
	kp, err := link.Kprobe("tcp_v4_connect", bpfObjs.KprobeTcpV4Connect, nil)
	if err != nil {
		log.Fatalf("opening kprobe: %s", err)
	}
	defer kp.Close()
	krp, err := link.Kretprobe("tcp_v4_connect", bpfObjs.KretprobeTcpV4Connect, nil)
	if err != nil {
		log.Fatalf("opening kprobe: %s", err)
	}
	defer krp.Close()

	// RingBuffer readerをオープンする
	rd, err := ringbuf.NewReader(bpfObjs.Events)
	if err != nil {
		log.Fatalf("opening ringbuf reader: %s", err)
	}
	defer rd.Close()

	// CTRL+Cを待ち受ける
	c := make(chan os.Signal, 1)
	signal.Notify(c, os.Interrupt, syscall.SIGTERM)

	// Close the reader when the process receives a signal, which will exit
	// the read loop.
	go func() {
		<-c

		if err := rd.Close(); err != nil {
			log.Fatalf("closing ringbuf reader: %s", err)
		}
	}()

	log.Println("Waiting for events..")

	// bpfEvent is generated by bpf2go.
	var event tcpconnectEvent
	for {
		record, err := rd.Read()
		if err != nil {
			if errors.Is(err, ringbuf.ErrClosed) {
				log.Println("Received signal, exiting..")
				return
			}
			log.Printf("reading from reader: %s", err)
			continue
		}

		// Parse the ringbuf event entry into a bpfEvent structure.
		if err := binary.Read(bytes.NewBuffer(record.RawSample), binary.LittleEndian, &event); err != nil {
			log.Printf("parsing ringbuf event: %s", err)
			continue
		}

		log.Printf(
			"pid: %d (%s)\t%s:%d => %s:%d \n",
			event.Tup.Pid,
			unix.ByteSliceToString(event.Tup.Comm[:]),
			formatIPv4Address(event.Tup.SaddrL),
			event.Tup.Sport,
			formatIPv4Address(event.Tup.DaddrL),
			event.Tup.Dport,
		)
	}

}

func formatIPv4Address(addr uint64) string {
	return netip.AddrFrom4([4]byte{
		uint8(addr),
		uint8(addr >> 8),
		uint8(addr >> 16),
		uint8(addr >> 24),
	}).String()
}
